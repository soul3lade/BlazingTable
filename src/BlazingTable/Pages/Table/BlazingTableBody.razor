@typeparam T
@using BlazingTable.Models

<tbody class="blazingtable-body">
    @CreateTableBody()
</tbody>


@code {

    [Parameter] public List<T> TableData { get; set; }

    [Parameter] public List<BlazingTableColumn> Columns { get; set; }

    [Parameter] public int ActivePage { get; set; }

    [Parameter] public int PageSize { get; set; }

    [Parameter] public EventCallback<T> OnRowClick { get; set; }

    private RenderFragment CreateTableBody()
    {
        if(TableData.Count() <= 0)
        {
            RenderFragment emptyData;

            emptyData = b =>
            {
                b.OpenElement(0, "div");
                b.AddAttribute(0, "class", "blazingtable-body");

                b.OpenElement(1, "span");
                b.AddAttribute(1, "class", "blazingtable-body-nodata");
                b.AddContent(1, "No Data");

                b.CloseElement();
                b.CloseElement();
            };

            return emptyData;
        }

        var startingIndex = PageSize * (ActivePage - 1);
        var endingIndex = ActivePage * PageSize;

        if (endingIndex > TableData.Count())
            endingIndex = TableData.Count();

        RenderFragment tableData;

        if (Columns != null)
        {
            tableData = b =>
            {
                for (int i = startingIndex; i < endingIndex; i++)
                {
                    var index = i;
                    b.OpenElement(0, "tr");
                    b.AddAttribute(0, "onclick", EventCallback.Factory.Create<T>(this, (() => CallParentRowClick(TableData[index]))));

                    foreach (var column in Columns.OrderBy(x => x.Order))
                    {
                        var prop = TableData[i].GetType().GetProperty(column.Id);
                        b.OpenElement(1, "td");
                        b.AddContent(1, prop.GetValue(TableData[i]));
                        b.CloseElement();
                    }

                    b.CloseElement();
                }
            };
        }
        else
        {
            tableData = b =>
            {
                for (int i = startingIndex; i < endingIndex; i++)
                {
                    var index = i;
                    b.OpenElement(0, "tr");
                    b.AddAttribute(0, "onclick", EventCallback.Factory.Create<T>(this, (() => CallParentRowClick(TableData[index]))));

                    foreach (var prop in TableData[i].GetType().GetProperties())
                    {
                        b.OpenElement(1, "td");
                        b.AddContent(1, prop.GetValue(TableData[i]));
                        b.CloseElement();
                    }

                    b.CloseElement();
                }
            };
        }

        return tableData;
    }

    private async Task CallParentRowClick(T row)
    {
        await OnRowClick.InvokeAsync(row);
    }

}
