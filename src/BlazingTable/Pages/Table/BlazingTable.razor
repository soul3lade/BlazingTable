@typeparam T
@using BlazingTable.Models

<div class="blazingtable" style="width: @Settings.Width; height: @Settings.Height">
    <BlazingTableHeader Title="@Settings.Title"></BlazingTableHeader>
    <table>
        <BlazingTableHead TableData="@Settings.Data.FirstOrDefault()" SortColumn="@SortingColumn" SortDirection="@SortingDirection" OnSortClick="@UpdateSorting" Columns="@Settings.Columns"></BlazingTableHead>
        <BlazingTableBody TableData="@Settings.Data" Columns="@Settings.Columns" ActivePage="@ActivePage" PageSize="@PageSize"></BlazingTableBody>
    </table>
    <BlazingTableFooter TotalRecords="@Settings.Data.Count()" CurrentPage="@ActivePage" PageSize="@PageSize" OnPageClick="@UpdatePaging" OnPageSizeClick="@UpdatePagingSize"></BlazingTableFooter>
</div>

@code {

    [Parameter] public string Title { get; set; }

    [Parameter] public List<T> TableData { get; set; }

    [Parameter] public BlazingTableSettings<T> Settings { get; set; }

    private string SortingColumn { get; set; }

    private string SortingDirection { get; set; }

    private int ActivePage { get; set; }

    private int PageSize { get; set; }

    protected override void OnInitialized()
    {
        ActivePage = 1;
        PageSize = 10;
        SortingDirection = "asc";

        if(Settings == null)
        {
            Settings = new BlazingTableSettings<T>()
            {
                Title = Title,
                Data = TableData,
                Width = "100%",
                Height = "60vh"
            };
        }
    }

    protected override void OnParametersSet()
    {

    }

    public void UpdateSorting(string sortingCol)
    {
        if (SortingColumn == sortingCol)
        {
            if (SortingDirection == "asc")
                SortingDirection = "desc";
            else
                SortingDirection = "asc";
        }
        else
            SortingDirection = "asc";

        SortingColumn = sortingCol;

        var propCol = typeof(T).GetProperty(SortingColumn);

        if (SortingDirection == "asc")
            Settings.Data = Settings.Data.OrderBy(x => propCol.GetValue(x, null)).ToList();
        else
            Settings.Data = Settings.Data.OrderByDescending(x => propCol.GetValue(x, null)).ToList();
    }

    public void UpdatePaging(int page)
    {
        ActivePage = page;
    }

    public void UpdatePagingSize(int pageSize)
    {
        PageSize = pageSize;
    }
}
